import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.model_selection import train_test_split

class LinearRegression:
    def __init__(self, learning_rate = 0.01, n_iters = 10):
        self.lr = learning_rate
        self.n_iters = n_iters
        self.weights = None
        self.bias = None
    
    def fit(self, X, y):
        rows, columns = X.shape

        self.weights = np.zeros(columns)
        self.bias = 0

        for _ in range(self.n_iters):
            y_predicted = np.dot(X,self.weights) + self.bias

            dw = 1/rows * np.dot(X.T,(y_predicted - y))
            db = 1/rows * np.sum(y_predicted - y)

            self.weights = self.weights - self.lr * dw
            self.bias = self.bias - self.lr * db 



    def predict(self, X):
        y_approx = np.dot(X, self.weights) + self.bias
        return y_approx

if __name__ == '__main__':

    def mse(true, pred):
        return np.mean((true - pred) **2)

    X, y = datasets.make_regression(
        n_samples=100, n_features=1, noise=20, random_state=4
    )

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=1234
    )
    
    regressor = LinearRegression(learning_rate=0.01, n_iters=1000)
    regressor.fit(X_train, y_train)
    predictions = regressor.predict(X_test)

    err = mse(y_test, predictions)
    print("MSE:", err)

    y_pred_line = regressor.predict(X)
    cmap = plt.get_cmap("viridis")
    fig = plt.figure(figsize=(8, 6))
    m1 = plt.scatter(X_train, y_train, color=cmap(0.9), s=10)
    m2 = plt.scatter(X_test, y_test, color=cmap(0.5), s=10)
    plt.plot(X, y_pred_line, color="black", linewidth=2, label="Prediction")
    plt.show()
