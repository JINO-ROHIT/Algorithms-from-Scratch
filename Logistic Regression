import numpy as np

class LogisticRegression:
	def __init__(self, learning_rate = 0.001, n_iters = 1000):
		self.lr = learning_rate
		self.n_iters = n_iters
		self.weights = None
		self.biases = None

	def fit(self, X, y):
	    n_samples, n_features = X.shape
	    self.weights = np.zeros(n_features)
	    self.biases = 0

	    for _ in range(self.n_iters):
	    	linear_model = np.dot(X, self.weights) + self.biases
	    	y_predicted = self.sigmoid(linear_model)

	    	dw = (1/n_samples) * np.dot(X.T, (y_predicted - y))
	    	db = (1/ n_samples) * np.sum(y_predicted - y)

	    	self.weights = self.weights - self.lr*dw
	    	self.biases = self.biases - self.lr*db

	def predict(self, X):
	    linear_model = np.dot(X, self.weights) + self.biases
	    y_predicted = self.sigmoid(linear_model)
	    pred_class = [1 if x > 0.5 else 0 for x in y_predicted]
	    return np.array(pred_class)

	def sigmoid(self,x):
	     return 1/ (1 + np.exp(-x))	

if __name__ == "__main__":
    from sklearn.model_selection import train_test_split
    from sklearn import datasets

    def accuracy(y_true, y_pred):
        accuracy = np.sum(y_true == y_pred) / len(y_true)
        return accuracy

    bc = datasets.load_breast_cancer()
    X, y = bc.data, bc.target

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=1234
    )

    regressor = LogisticRegression(learning_rate=0.0001, n_iters=1000)
    regressor.fit(X_train, y_train)
    predictions = regressor.predict(X_test)

    print("LR classification accuracy:", accuracy(y_test, predictions))
